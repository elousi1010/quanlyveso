import React, { useState } from 'react';
import {
  Box,
  Typography,
  Button,
  Card,
  CardContent,
  Chip,
  Alert,
  Tabs,
  Tab,
  Grid,
  LinearProgress,
} from '@mui/material';
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Warning as WarningIcon,
  CheckCircle as CheckIcon,
  Error as ErrorIcon,
  Assessment as AssessmentIcon,
  Security as SecurityIcon,
  Report as ReportIcon,
} from '@mui/icons-material';
import { DataGrid, type GridColDef, GridActionsCellItem } from '@mui/x-data-grid';
import {
  LineChart,
  Line,
  BarChart,
  Bar,
  PieChart,
  Pie,
  Cell,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip as RechartsTooltip,
  Legend,
  ResponsiveContainer,
  RadarChart,
  PolarGrid,
  PolarAngleAxis,
  PolarRadiusAxis,
  Radar,
} from 'recharts';
import dayjs from 'dayjs';

interface RiskAssessment {
  id: string;
  agentId: string;
  assessmentDate: Date;
  riskLevel: 'low' | 'medium' | 'high' | 'critical';
  overallScore: number; // 0-100
  
  // Risk factors
  financialRisk: {
    score: number;
    factors: string[];
    debtRatio: number;
    paymentHistory: number;
    creditUtilization: number;
  };
  
  operationalRisk: {
    score: number;
    factors: string[];
    complaintRate: number;
    returnRate: number;
    deliveryPerformance: number;
  };
  
  complianceRisk: {
    score: number;
    factors: string[];
    contractViolations: number;
    territoryViolations: number;
    reportingAccuracy: number;
  };
  
  marketRisk: {
    score: number;
    factors: string[];
    marketShare: number;
    competitionLevel: number;
    economicFactors: number;
  };
  
  // Mitigation
  mitigationActions: MitigationAction[];
  status: 'active' | 'mitigated' | 'resolved' | 'escalated';
  nextReviewDate: Date;
  assessedBy: string;
  notes?: string;
}

interface MitigationAction {
  id: string;
  riskId: string;
  action: string;
  priority: 'low' | 'medium' | 'high' | 'critical';
  status: 'pending' | 'in_progress' | 'completed' | 'cancelled';
  assignedTo: string;
  dueDate: Date;
  completedDate?: Date;
  description: string;
}

interface RiskAlert {
  id: string;
  agentId: string;
  riskType: 'financial' | 'operational' | 'compliance' | 'market' | 'system';
  severity: 'low' | 'medium' | 'high' | 'critical';
  title: string;
  description: string;
  triggerValue: number;
  currentValue: number;
  threshold: number;
  isActive: boolean;
  createdAt: Date;
  acknowledgedAt?: Date;
  acknowledgedBy?: string;
  resolvedAt?: Date;
  resolvedBy?: string;
  autoGenerated: boolean;
}



const mockRiskAssessments: RiskAssessment[] = [
  {
    id: '1',
    agentId: '1',
    assessmentDate: new Date('2024-01-15'),
    riskLevel: 'low',
    overallScore: 85,
    financialRisk: {
      score: 90,
      factors: ['Tốt'],
      debtRatio: 0.3,
      paymentHistory: 95,
      creditUtilization: 0.6,
    },
    operationalRisk: {
      score: 80,
      factors: ['Tốt'],
      complaintRate: 0.5,
      returnRate: 2,
      deliveryPerformance: 95,
    },
    complianceRisk: {
      score: 95,
      factors: ['Tốt'],
      contractViolations: 0,
      territoryViolations: 0,
      reportingAccuracy: 98,
    },
    marketRisk: {
      score: 75,
      factors: ['Cạnh tranh cao'],
      marketShare: 35,
      competitionLevel: 7,
      economicFactors: 6,
    },
    mitigationActions: [],
    status: 'active',
    nextReviewDate: new Date('2024-04-15'),
    assessedBy: 'admin',
  },
  {
    id: '2',
    agentId: '2',
    assessmentDate: new Date('2024-01-20'),
    riskLevel: 'medium',
    overallScore: 65,
    financialRisk: {
      score: 70,
      factors: ['Tỷ lệ nợ cao'],
      debtRatio: 0.7,
      paymentHistory: 80,
      creditUtilization: 0.85,
    },
    operationalRisk: {
      score: 60,
      factors: ['Tỷ lệ phàn nàn cao'],
      complaintRate: 2.5,
      returnRate: 5,
      deliveryPerformance: 75,
    },
    complianceRisk: {
      score: 80,
      factors: ['Tốt'],
      contractViolations: 1,
      territoryViolations: 0,
      reportingAccuracy: 90,
    },
    marketRisk: {
      score: 70,
      factors: ['Thị phần thấp'],
      marketShare: 20,
      competitionLevel: 8,
      economicFactors: 7,
    },
    mitigationActions: [
      {
        id: '1',
        riskId: '2',
        action: 'Giảm tỷ lệ nợ xuống dưới 60%',
        priority: 'high',
        status: 'in_progress',
        assignedTo: 'admin',
        dueDate: new Date('2024-02-20'),
        description: 'Thực hiện kế hoạch thanh toán nợ',
      },
    ],
    status: 'active',
    nextReviewDate: new Date('2024-03-20'),
    assessedBy: 'admin',
  },
  {
    id: '3',
    agentId: '3',
    assessmentDate: new Date('2024-01-25'),
    riskLevel: 'high',
    overallScore: 45,
    financialRisk: {
      score: 40,
      factors: ['Nợ quá cao', 'Thanh toán chậm'],
      debtRatio: 0.9,
      paymentHistory: 60,
      creditUtilization: 0.95,
    },
    operationalRisk: {
      score: 50,
      factors: ['Nhiều phàn nàn', 'Tỷ lệ trả hàng cao'],
      complaintRate: 5,
      returnRate: 8,
      deliveryPerformance: 60,
    },
    complianceRisk: {
      score: 60,
      factors: ['Vi phạm hợp đồng'],
      contractViolations: 3,
      territoryViolations: 1,
      reportingAccuracy: 75,
    },
    marketRisk: {
      score: 55,
      factors: ['Thị phần rất thấp'],
      marketShare: 10,
      competitionLevel: 9,
      economicFactors: 8,
    },
    mitigationActions: [
      {
        id: '2',
        riskId: '3',
        action: 'Tạm dừng cấp tín dụng mới',
        priority: 'critical',
        status: 'completed',
        assignedTo: 'admin',
        dueDate: new Date('2024-01-30'),
        completedDate: new Date('2024-01-28'),
        description: 'Ngừng cấp tín dụng cho đến khi cải thiện',
      },
    ],
    status: 'escalated',
    nextReviewDate: new Date('2024-02-25'),
    assessedBy: 'admin',
  },
];

const mockRiskAlerts: RiskAlert[] = [
  {
    id: '1',
    agentId: '2',
    riskType: 'financial',
    severity: 'high',
    title: 'Tỷ lệ nợ cao',
    description: 'Tỷ lệ nợ của đại lý 2 đã vượt quá 70%',
    triggerValue: 0.7,
    currentValue: 0.7,
    threshold: 0.6,
    isActive: true,
    createdAt: new Date('2024-01-20'),
    autoGenerated: true,
  },
  {
    id: '2',
    agentId: '3',
    riskType: 'operational',
    severity: 'critical',
    title: 'Tỷ lệ phàn nàn cao',
    description: 'Tỷ lệ phàn nàn của đại lý 3 đã vượt quá 5%',
    triggerValue: 5,
    currentValue: 5,
    threshold: 3,
    isActive: true,
    createdAt: new Date('2024-01-25'),
    autoGenerated: true,
  },
  {
    id: '3',
    agentId: '1',
    riskType: 'compliance',
    severity: 'medium',
    title: 'Hợp đồng sắp hết hạn',
    description: 'Hợp đồng của đại lý 1 sẽ hết hạn trong 30 ngày',
    triggerValue: 30,
    currentValue: 30,
    threshold: 60,
    isActive: true,
    createdAt: new Date('2024-01-15'),
    autoGenerated: true,
  },
];

const RiskManagement: React.FC = () => {
  const [assessments] = useState<RiskAssessment[]>(mockRiskAssessments);
  const [alerts, setAlerts] = useState<RiskAlert[]>(mockRiskAlerts);
  const [tabValue, setTabValue] = useState(0);
  const [alert, setAlert] = useState<{ type: 'success' | 'error'; message: string } | null>(null);

  const getRiskLevelColor = (level: string) => {
    switch (level) {
      case 'low': return 'success';
      case 'medium': return 'warning';
      case 'high': return 'error';
      case 'critical': return 'error';
      default: return 'default';
    }
  };

  const getRiskLevelText = (level: string) => {
    switch (level) {
      case 'low': return 'Thấp';
      case 'medium': return 'Trung bình';
      case 'high': return 'Cao';
      case 'critical': return 'Nghiêm trọng';
      default: return level;
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'low': return 'success';
      case 'medium': return 'warning';
      case 'high': return 'error';
      case 'critical': return 'error';
      default: return 'default';
    }
  };

  const getSeverityText = (severity: string) => {
    switch (severity) {
      case 'low': return 'Thấp';
      case 'medium': return 'Trung bình';
      case 'high': return 'Cao';
      case 'critical': return 'Nghiêm trọng';
      default: return severity;
    }
  };

  const getRiskTypeText = (type: string) => {
    switch (type) {
      case 'financial': return 'Tài chính';
      case 'operational': return 'Vận hành';
      case 'compliance': return 'Tuân thủ';
      case 'market': return 'Thị trường';
      case 'system': return 'Hệ thống';
      default: return type;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'warning';
      case 'mitigated': return 'info';
      case 'resolved': return 'success';
      case 'escalated': return 'error';
      default: return 'default';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'active': return 'Hoạt động';
      case 'mitigated': return 'Đã giảm thiểu';
      case 'resolved': return 'Đã giải quyết';
      case 'escalated': return 'Đã leo thang';
      default: return status;
    }
  };


  const handleAddAssessment = () => {
    // TODO: Implement add assessment
  };

  const handleEditAssessment = () => {
    // TODO: Implement edit assessment
  };

  const handleAcknowledgeAlert = (alertId: string) => {
    setAlerts(prev => prev.map(a => 
      a.id === alertId 
        ? { ...a, acknowledgedAt: new Date(), acknowledgedBy: 'admin', isActive: false }
        : a
    ));
    setAlert({ type: 'success', message: 'Đã xác nhận cảnh báo' });
  };

  const handleResolveAlert = (alertId: string) => {
    setAlerts(prev => prev.map(a => 
      a.id === alertId 
        ? { ...a, resolvedAt: new Date(), resolvedBy: 'admin', isActive: false }
        : a
    ));
    setAlert({ type: 'success', message: 'Đã giải quyết cảnh báo' });
  };

  const assessmentColumns: GridColDef[] = [
    { field: 'agentId', headerName: 'Mã đại lý', width: 120, flex: 1 },
    { 
      field: 'overallScore', 
      headerName: 'Điểm tổng thể', 
      width: 150, 
      renderCell: (params) => (
        <Box display="flex" alignItems="center" gap={1}>
          <span className="font-semibold">{params.value}</span>
          <LinearProgress 
            variant="determinate" 
            value={params.value} 
            className="w-16"
            color={params.value >= 80 ? 'success' : params.value >= 60 ? 'warning' : 'error'}
          />
        </Box>
      )
    },
    { 
      field: 'riskLevel', 
      headerName: 'Mức rủi ro', 
      width: 120, 
      renderCell: (params) => (
        <Chip 
          label={getRiskLevelText(params.value)} 
          color={getRiskLevelColor(params.value)} 
          size="small" 
        />
      )
    },
    { 
      field: 'financialRisk', 
      headerName: 'Rủi ro tài chính', 
      width: 150, 
      renderCell: (params) => (
        <Box display="flex" alignItems="center" gap={1}>
          <span className="font-semibold">{params.value.score}</span>
          <LinearProgress 
            variant="determinate" 
            value={params.value.score} 
            className="w-12"
            color={params.value.score >= 80 ? 'success' : params.value.score >= 60 ? 'warning' : 'error'}
          />
        </Box>
      )
    },
    { 
      field: 'operationalRisk', 
      headerName: 'Rủi ro vận hành', 
      width: 150, 
      renderCell: (params) => (
        <Box display="flex" alignItems="center" gap={1}>
          <span className="font-semibold">{params.value.score}</span>
          <LinearProgress 
            variant="determinate" 
            value={params.value.score} 
            className="w-12"
            color={params.value.score >= 80 ? 'success' : params.value.score >= 60 ? 'warning' : 'error'}
          />
        </Box>
      )
    },
    { 
      field: 'status', 
      headerName: 'Trạng thái', 
      width: 120, 
      renderCell: (params) => (
        <Chip 
          label={getStatusText(params.value)} 
          color={getStatusColor(params.value)} 
          size="small" 
        />
      )
    },
    { 
      field: 'assessmentDate', 
      headerName: 'Ngày đánh giá', 
      width: 120, 
      renderCell: (params) => dayjs(params.value).format('DD/MM/YYYY')
    },
    {
      field: 'actions',
      type: 'actions',
      headerName: 'Thao tác',
      width: 120,
      getActions: (params) => [
        <GridActionsCellItem
          icon={<EditIcon />}
          label="Sửa"
          onClick={() => handleEditAssessment()}
        />,
        <GridActionsCellItem
          icon={<DeleteIcon />}
          label="Xóa"
          onClick={() => {/* Handle delete */}}
        />,
      ],
    },
  ];

  const alertColumns: GridColDef[] = [
    { field: 'agentId', headerName: 'Mã đại lý', width: 120, flex: 1 },
    { 
      field: 'riskType', 
      headerName: 'Loại rủi ro', 
      width: 120, 
      renderCell: (params) => getRiskTypeText(params.value)
    },
    { 
      field: 'severity', 
      headerName: 'Mức độ', 
      width: 120, 
      renderCell: (params) => (
        <Chip 
          label={getSeverityText(params.value)} 
          color={getSeverityColor(params.value)} 
          size="small" 
        />
      )
    },
    { field: 'title', headerName: 'Tiêu đề', width: 200, flex: 2 },
    { field: 'description', headerName: 'Mô tả', width: 250, flex: 2 },
    { 
      field: 'isActive', 
      headerName: 'Trạng thái', 
      width: 120, 
      renderCell: (params) => (
        <Chip 
          label={params.value ? 'Hoạt động' : 'Đã xử lý'} 
          color={params.value ? 'error' : 'success'} 
          size="small" 
        />
      )
    },
    { 
      field: 'createdAt', 
      headerName: 'Ngày tạo', 
      width: 120, 
      renderCell: (params) => dayjs(params.value).format('DD/MM/YYYY')
    },
    {
      field: 'actions',
      type: 'actions',
      headerName: 'Thao tác',
      width: 150,
      getActions: (params) => [
        <GridActionsCellItem
          icon={<CheckIcon />}
          label="Xác nhận"
          onClick={() => handleAcknowledgeAlert(params.row.id)}
          disabled={!params.row.isActive}
        />,
        <GridActionsCellItem
          icon={<CheckIcon />}
          label="Giải quyết"
          onClick={() => handleResolveAlert(params.row.id)}
          disabled={!params.row.isActive}
        />,
      ],
    },
  ];

  const stats = {
    totalAssessments: assessments.length,
    lowRisk: assessments.filter(a => a.riskLevel === 'low').length,
    mediumRisk: assessments.filter(a => a.riskLevel === 'medium').length,
    highRisk: assessments.filter(a => a.riskLevel === 'high').length,
    criticalRisk: assessments.filter(a => a.riskLevel === 'critical').length,
    activeAlerts: alerts.filter(a => a.isActive).length,
    criticalAlerts: alerts.filter(a => a.severity === 'critical' && a.isActive).length,
    averageScore: assessments.length > 0 ? 
      Math.round(assessments.reduce((sum, a) => sum + a.overallScore, 0) / assessments.length) : 0,
    pendingActions: assessments.reduce((sum, a) => 
      sum + a.mitigationActions.filter(ma => ma.status === 'pending' || ma.status === 'in_progress').length, 0),
  };

  // Chart data
  const riskDistributionData = [
    { name: 'Thấp', value: stats.lowRisk, color: '#4caf50' },
    { name: 'Trung bình', value: stats.mediumRisk, color: '#ff9800' },
    { name: 'Cao', value: stats.highRisk, color: '#f44336' },
    { name: 'Nghiêm trọng', value: stats.criticalRisk, color: '#d32f2f' },
  ];

  const riskTrendData = assessments.map(a => ({
    date: dayjs(a.assessmentDate).format('MM/DD'),
    score: a.overallScore,
    financial: a.financialRisk.score,
    operational: a.operationalRisk.score,
    compliance: a.complianceRisk.score,
    market: a.marketRisk.score,
  }));

  const alertTypeData = alerts.reduce((acc, alert) => {
    const type = getRiskTypeText(alert.riskType);
    acc[type] = (acc[type] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const alertChartData = Object.entries(alertTypeData).map(([type, count]) => ({
    type,
    count,
  }));

  return (
    <Box className="p-3 sm:p-4 lg:p-6 space-y-4 sm:space-y-6">
      {/* Header */}
      <div className="bg-gradient-to-r from-red-600 to-pink-600 rounded-xl p-4 sm:p-6 text-white">
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-3 sm:space-y-0">
          <div className="flex items-center space-x-3">
            <div className="p-2 bg-white bg-opacity-20 rounded-lg">
              <SecurityIcon className="text-2xl sm:text-3xl" />
            </div>
            <div>
              <h1 className="text-xl sm:text-2xl lg:text-3xl font-bold">Quản lý rủi ro</h1>
              <p className="text-sm sm:text-base text-red-100">Đánh giá và quản lý rủi ro đại lý</p>
            </div>
          </div>
          <div className="flex space-x-2">
            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={handleAddAssessment}
              className="bg-white text-red-600 hover:bg-red-50 font-semibold px-4 py-2 rounded-lg"
            >
              Đánh giá rủi ro
            </Button>
            <Button
              variant="contained"
              startIcon={<ReportIcon />}
              className="bg-white text-red-600 hover:bg-red-50 font-semibold px-4 py-2 rounded-lg"
            >
              Báo cáo rủi ro
            </Button>
          </div>
        </div>
      </div>

      {/* Alert */}
      {alert && (
        <Alert 
          severity={alert.type} 
          onClose={() => setAlert(null)}
          className="mb-4"
        >
          {alert.message}
        </Alert>
      )}

      {/* Stats Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
        <Card className="stat-card">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <Typography variant="body2" className="text-gray-600 text-xs sm:text-sm">
                  Điểm TB
                </Typography>
                <Typography variant="h4" className="font-bold text-gray-900 text-xl sm:text-2xl lg:text-3xl">
                  {stats.averageScore}
                </Typography>
              </div>
              <AssessmentIcon className="text-blue-500 text-2xl sm:text-3xl" />
            </div>
          </CardContent>
        </Card>
        <Card className="stat-card-success">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <Typography variant="body2" className="text-gray-600 text-xs sm:text-sm">
                  Rủi ro thấp
                </Typography>
                <Typography variant="h4" className="font-bold text-gray-900 text-xl sm:text-2xl lg:text-3xl">
                  {stats.lowRisk}
                </Typography>
              </div>
              <CheckIcon className="text-green-500 text-2xl sm:text-3xl" />
            </div>
          </CardContent>
        </Card>
        <Card className="stat-card-warning">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <Typography variant="body2" className="text-gray-600 text-xs sm:text-sm">
                  Cảnh báo hoạt động
                </Typography>
                <Typography variant="h4" className="font-bold text-gray-900 text-xl sm:text-2xl lg:text-3xl">
                  {stats.activeAlerts}
                </Typography>
              </div>
              <WarningIcon className="text-yellow-500 text-2xl sm:text-3xl" />
            </div>
          </CardContent>
        </Card>
        <Card className="stat-card-error">
          <CardContent className="p-4">
            <div className="flex items-center justify-between">
              <div>
                <Typography variant="body2" className="text-gray-600 text-xs sm:text-sm">
                  Rủi ro nghiêm trọng
                </Typography>
                <Typography variant="h4" className="font-bold text-gray-900 text-xl sm:text-2xl lg:text-3xl">
                  {stats.criticalRisk}
                </Typography>
              </div>
              <ErrorIcon className="text-red-500 text-2xl sm:text-3xl" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Tabs */}
      <Card className="card">
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs value={tabValue} onChange={(_, newValue) => setTabValue(newValue)}>
            <Tab label="Đánh giá rủi ro" />
            <Tab label="Cảnh báo" />
            <Tab label="Phân tích" />
            <Tab label="Báo cáo" />
          </Tabs>
        </Box>

        {/* Risk Assessments Tab */}
        {tabValue === 0 && (
          <CardContent className="p-0">
            <div style={{ height: 400, width: '100%' }}>
              <DataGrid
                rows={assessments}
                columns={assessmentColumns}
                initialState={{
                  pagination: {
                    paginationModel: { pageSize: 10 },
                  },
                }}
                pageSizeOptions={[10, 25, 50]}
                disableRowSelectionOnClick
                className="border-0"
              />
            </div>
          </CardContent>
        )}

        {/* Alerts Tab */}
        {tabValue === 1 && (
          <CardContent className="p-0">
            <div style={{ height: 400, width: '100%' }}>
              <DataGrid
                rows={alerts}
                columns={alertColumns}
                initialState={{
                  pagination: {
                    paginationModel: { pageSize: 10 },
                  },
                }}
                pageSizeOptions={[10, 25, 50]}
                disableRowSelectionOnClick
                className="border-0"
              />
            </div>
          </CardContent>
        )}

        {/* Analytics Tab */}
        {tabValue === 2 && (
          <CardContent>
            <Grid container spacing={3}>
              <Grid size={{ xs: 12, md: 6 }}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      Phân bố mức rủi ro
                    </Typography>
                    <ResponsiveContainer width="100%" height={300}>
                      <PieChart>
                        <Pie
                          data={riskDistributionData}
                          cx="50%"
                          cy="50%"
                          labelLine={false}
                          label={({ name, value }) => `${name}: ${value}`}
                          outerRadius={80}
                          fill="#8884d8"
                          dataKey="value"
                        >
                          {riskDistributionData.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={entry.color} />
                          ))}
                        </Pie>
                        <RechartsTooltip />
                      </PieChart>
                    </ResponsiveContainer>
                  </CardContent>
                </Card>
              </Grid>
              <Grid size={{ xs: 12, md: 6 }}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      Xu hướng rủi ro
                    </Typography>
                    <ResponsiveContainer width="100%" height={300}>
                      <LineChart data={riskTrendData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="date" />
                        <YAxis />
                        <RechartsTooltip />
                        <Legend />
                        <Line type="monotone" dataKey="score" stroke="#8884d8" name="Tổng thể" />
                        <Line type="monotone" dataKey="financial" stroke="#82ca9d" name="Tài chính" />
                        <Line type="monotone" dataKey="operational" stroke="#ffc658" name="Vận hành" />
                        <Line type="monotone" dataKey="compliance" stroke="#ff7300" name="Tuân thủ" />
                        <Line type="monotone" dataKey="market" stroke="#00ff00" name="Thị trường" />
                      </LineChart>
                    </ResponsiveContainer>
                  </CardContent>
                </Card>
              </Grid>
              <Grid size={{ xs: 12, md: 6 }}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      Loại cảnh báo
                    </Typography>
                    <ResponsiveContainer width="100%" height={300}>
                      <BarChart data={alertChartData}>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="type" />
                        <YAxis />
                        <RechartsTooltip />
                        <Bar dataKey="count" fill="#8884d8" />
                      </BarChart>
                    </ResponsiveContainer>
                  </CardContent>
                </Card>
              </Grid>
              <Grid size={{ xs: 12, md: 6 }}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      Radar rủi ro
                    </Typography>
                    <ResponsiveContainer width="100%" height={300}>
                      <RadarChart data={assessments.slice(0, 1).map(a => ({
                        financial: a.financialRisk.score,
                        operational: a.operationalRisk.score,
                        compliance: a.complianceRisk.score,
                        market: a.marketRisk.score,
                      }))}>
                        <PolarGrid />
                        <PolarAngleAxis dataKey="subject" />
                        <PolarRadiusAxis />
                        <Radar name="Rủi ro" dataKey="financial" stroke="#8884d8" fill="#8884d8" fillOpacity={0.6} />
                      </RadarChart>
                    </ResponsiveContainer>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          </CardContent>
        )}

        {/* Reports Tab */}
        {tabValue === 3 && (
          <CardContent>
            <Grid container spacing={3}>
              <Grid size={{ xs: 12, md: 6 }}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      Tổng quan rủi ro
                    </Typography>
                    <Box className="space-y-2">
                      <div className="flex justify-between">
                        <span>Tổng đánh giá:</span>
                        <span className="font-semibold">{stats.totalAssessments}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Rủi ro thấp:</span>
                        <span className="font-semibold text-green-600">{stats.lowRisk}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Rủi ro trung bình:</span>
                        <span className="font-semibold text-yellow-600">{stats.mediumRisk}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Rủi ro cao:</span>
                        <span className="font-semibold text-orange-600">{stats.highRisk}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Rủi ro nghiêm trọng:</span>
                        <span className="font-semibold text-red-600">{stats.criticalRisk}</span>
                      </div>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
              <Grid size={{ xs: 12, md: 6 }}>
                <Card>
                  <CardContent>
                    <Typography variant="h6" gutterBottom>
                      Cảnh báo & Hành động
                    </Typography>
                    <Box className="space-y-2">
                      <div className="flex justify-between">
                        <span>Cảnh báo hoạt động:</span>
                        <span className="font-semibold text-red-600">{stats.activeAlerts}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Cảnh báo nghiêm trọng:</span>
                        <span className="font-semibold text-red-600">{stats.criticalAlerts}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Hành động chờ xử lý:</span>
                        <span className="font-semibold text-yellow-600">{stats.pendingActions}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Điểm rủi ro TB:</span>
                        <span className="font-semibold">{stats.averageScore}</span>
                      </div>
                    </Box>
                  </CardContent>
                </Card>
              </Grid>
            </Grid>
          </CardContent>
        )}
      </Card>
    </Box>
  );
};

export default RiskManagement;
